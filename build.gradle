buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'maven'
    id 'java'
    id 'idea'
    id 'io.freefair.lombok' version '4.1.6'
    id 'nebula.release' version '14.1.0'
    id 'com.jfrog.bintray' version '1.8.4'
}

repositories {
    jcenter()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}

jar {
    baseName = project.name
}

jar.enabled=true

group 'com.rnbwarden'
sourceCompatibility = 11
targetCompatibility = 11

//noinspection GroovyAssignabilityCheck
configurations.all {
    exclude module: 'slf4j-log4j12'
}
dependencies {

    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.apache.commons:commons-pool2:2.8.0'
    compile 'commons-io:commons-io:2.6'

    compileOnly 'org.springframework.boot:spring-boot:2.2.6.RELEASE'
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure:2.2.6.RELEASE'
    compileOnly 'org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE'

    compileOnly 'org.slf4j:slf4j-api:1.7.30'

    compileOnly 'com.fasterxml.jackson.core:jackson-databind:2.10.2'
    compileOnly 'com.fasterxml.jackson.core:jackson-core:2.10.2'

    compileOnly 'org.springframework.data:spring-data-redis:2.2.6.RELEASE'
    //jedis
    compileOnly 'redis.clients:jedis:3.3.0'
    compileOnly 'com.redislabs:jredisearch:1.7.0'
    //lettuce
    compileOnly 'com.redislabs:lettusearch:2.3.2'
    compileOnly ('com.redislabs:spring-redisearch:2.3.2') {
        exclude group: 'com.redislabs', module: 'lettusearch'
    }

    testCompile 'org.springframework.boot:spring-boot-starter-test:2.2.6.RELEASE'
    testCompile 'junit:junit:4.13'
    testCompile 'org.mockito:mockito-core:3.2.4'
}

sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}

compileJava.dependsOn(processResources)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

task generatePom {
    doLast {
        pom {}.writeTo("$buildDir/libs/${project.name}-${project.version}.pom")
    }
}
build.dependsOn(generatePom)

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('bintrayUser')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('bintrayApiKey')

//    configurations = ['published', 'archives']
    configurations = ['archives']
    //dryRun = true //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published
    pkg {
        repo = 'maven'
        userOrg = 'rnbwarden' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'jredisearch-spring-boot-starter'
        websiteUrl = 'https://github.com/rnbWarden/jredisearch-spring-boot-starter'
        issueTrackerUrl = 'https://github.com/rnbWarden/jredisearch-spring-boot-starter/issues'
        vcsUrl = 'https://github.com/rnbWarden/jredisearch-spring-boot-starter.git'
        licenses = ['Apache-2.0']
        labels = ['redisearch', 'java', 'spring']
        publicDownloadNumbers = true
    }
}